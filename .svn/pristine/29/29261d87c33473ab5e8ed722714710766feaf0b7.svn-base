//
// Created from BuildGeometry program
//
#include "BGField1.hh"
#include "Fortran_subs.inc"
#include "G4ios.hh"
#include "G4UnitsTable.hh"
#include <fstream>
#include "G4SystemOfUnits.hh"


BGField1::BGField1(G4double xoffset,G4double zoffset,G4double zbefore,G4double zafter)
{

  FieldStrength_0 = 1.37991; //from specifications in T*m

  Pi = 3.1415926535898;
  for (i = 0; i < 75; i++) data[i] = 0;
  
  data[0] = 1;
  data[1] = 1;
  data[2] = 1;
  data[9] = zbefore/cm; //drift length before quad
  data[10] = zafter/cm; //drift length after quad
  data[11] = 13.98; //effective field length in cm
  data[12] = 3.5; //poll radius in cm
  data[13] = FieldStrength_0;
  data[18] = 20;
  data[19] = -10;
  data[20] = -10;
  data[21] = 20;
  data[22] = 0.1122;
  data[23] = 6.2671;
  data[24] = -1.4982;
  data[25] = 3.5882;
  data[26] = -2.1209;
  data[27] = 1.723;
  data[28] = 0.1122;
  data[29] = 6.2671;
  data[30] = -1.4982;
  data[31] = 3.5882;
  data[32] = -2.1209;
  data[33] = 1.723;
  data[34] = 1;
  data[35] = 1;
  data[36] = 1;
  data[37] = 1;
  offset[0] = xoffset/cm; // x-coord. of beginning of field wrt world logical volume
  offset[1] = 0;
  offset[2] = zoffset/cm; // z-coord. of beginning of field wrt world logical volume
}


BGField1::~BGField1()
{
}


void BGField1::GetFieldValue(const G4double Point[3],G4double *Bfield) const
{
	double pos[3], pos2[3];
	G4double field[3];
	pos2[0] = Point[0]/cm - offset[0];
	pos2[1] = Point[1]/cm - offset[1];
	pos2[2] = Point[2]/cm - offset[2];
	//G4cout<<"before rot "<<pos2[0]<<" "<<pos2[1]<<" "<<pos2[2]<<G4endl;
	// Rotate the position to the reference frame of the element.  These are counter clockwise rotations
	pos[0] = cos(Pi/180*360)*pos2[0] + sin(Pi/180*360)*pos2[2];
	pos[1] = pos2[1];
	pos[2] = -sin(Pi/180*360)*pos2[0] + cos(Pi/180*360)*pos2[2];
	pos[0] += 0;
	pos[1] += 0;
	pos[2] += 0;
	//G4cout<<"after rot "<<pos[0]<<" "<<pos[1]<<" "<<G4BestUnit(pos[2],"Length")<<G4endl;
	field[0] = 0;
	field[1] = 0;
	field[2] = 0;
	mitray_poles__(data,pos,field);
	field[0] *= tesla;
	field[1] *= tesla;
	field[2] *= tesla;
	Bfield[0] = cos(Pi/180*360)*field[0] - sin(Pi/180*360)*field[2];
	Bfield[1] = field[1];
	Bfield[2] = sin(Pi/180*360)*field[0] + cos(Pi/180*360)*field[2];
	Bfield[3] = 0;
	Bfield[4] = 0;
	Bfield[5] = 0;

	// scale Bfield (work-around solution to keep charge state fixed)
	if (currentCharge!=0.0) {
	  Bfield[0] *= userCharge/currentCharge;
	  Bfield[1] *= userCharge/currentCharge;
	  Bfield[2] *= userCharge/currentCharge;
	}
	//G4cout<<pos[2]<<"\t"<<data[9]-pos[2]<<"\t"<<-(data[9]-pos[2])-data[11]<<G4endl;
    G4double ZB=data[9]-pos[2];
    G4double ZC=-ZB-data[11];
    G4double Z11=data[18];
    G4double Z12=data[19];
    G4double Z21=data[20];
    G4double Z22=data[21];
    /*if(ZB.GT.Z11 .OR. ZC.GT.Z22)THEN
          IZONE=0
          IF(LDIAG)THEN
              WRITE(lout,*)'FAR ENTRANCE/EXIT REGION'
          ENDIF
          RETURN
      ENDIF
C
C     Check for uniform field zone
      IF(ZB.LE.Z12 .AND. ZC.LE.Z21)THEN
          IZONE=2
          IF(LDIAG)THEN
              WRITE(lout,*)'UNIFORM FIELD REGION'
          ENDIF
          RETURN      
      ENDIF
C
C     Check for entrance or exit fringe field
      IF(ZB.LE.Z11 .AND. ZB.GT.Z12)THEN
          LENTR=.TRUE.
          IZONE=1
      ELSE
          LENTR=.FALSE.
      ENDIF
      IF(ZC.LE.Z22 .AND. ZC.GT.Z21)THEN
          LEXIT=.TRUE.
          IZONE=3
      ELSE
          LEXIT=.FALSE.
      ENDIF*/

}
