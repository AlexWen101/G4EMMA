//
// Created from BuildGeometry program
//
#include "BGField4.hh"
#include "Fortran_subs.inc"
#include "G4UnitsTable.hh"
#include <fstream>
#include "G4SystemOfUnits.hh"


BGField4::BGField4(G4double xoffset, G4double zoffset,G4double zbefore,G4double zafter)
{

  FieldStrength_0 = 0.96624; //magneticRigidity_0*1./(2.99792458e2) (EMMADetectorConstruction.cc) in T*m

  Pi = 3.1415926535898;
  for (i = 0; i < 75; i++) data[i] = 0;

  data[0] = 1;
  data[1] = 1;
  data[2] = 1;
  data[3] = 1;
  data[4] = 2;
  data[10] = zbefore/cm; //drift length before quad
  data[11] = zafter/cm; //drift length after quad
  data[12] = 12;
  data[13] = 100; //radius of MD in cm
  data[14] = FieldStrength_0;
  data[15] = 40; //39.89865; //angle ubtended by MD in deg (modified to get correct eff. field length)
  data[16] = 8.2993;
  data[17] = 8.2993;
  data[24] = 50;
  data[25] = -25;
  data[26] = -25;
  data[27] = 50;
  data[28] = 0.2401;
  data[29] = 1.8639;
  data[30] = -0.5572;
  data[31] = 0.3904;
  data[34] = 0.2401;
  data[35] = 1.8639;
  data[36] = -0.5572;
  data[37] = 0.3904;
  data[46] = 0.00288;
  data[47] = 0.00288;
  data[48] = 40;
  data[49] = 40;
  offset[0] = xoffset/cm; // x-coord. of beginning of field wrt world logical volume
  offset[1] = 0;
  offset[2] = zoffset/cm; // z-coord. of beginning of field wrt world logical volume
}

BGField4::~BGField4()
{
}
void BGField4::GetFieldValue(const double Point[3],G4double *Bfield) const
{
	double pos[3], pos2[3];
	G4double field[3];
	pos2[0] = Point[0]/cm - offset[0];
	pos2[1] = Point[1]/cm - offset[1];
	pos2[2] = Point[2]/cm - offset[2];
	// Rotate the position to the reference frame of the element.  These are counter clockwise rotations
	pos[0] = cos(Pi/180*20)*pos2[0] + sin(Pi/180*20)*pos2[2];
    pos[1] = pos2[1];
	pos[2] = -sin(Pi/180*20)*pos2[0] + cos(Pi/180*20)*pos2[2];
	pos[0] = -pos[0];
	pos[1] = -pos[1];
	pos[0] += 0.4087;
	pos[1] += 0;
	pos[2] += 0;
	field[0] = 0;
	field[1] = 0;
	field[2] = 0;
	mitray_dipole__(data,pos,field);
	field[0] *= -tesla;
	field[1] *= -tesla;
	field[2] *= tesla;//*0.98114;
	Bfield[0] = cos(Pi/180*20)*field[0] - sin(Pi/180*20)*field[2];
	Bfield[1] = field[1];
	Bfield[2] = sin(Pi/180*20)*field[0] + cos(Pi/180*20)*field[2];
	Bfield[3] = 0;
	Bfield[4] = 0;
	Bfield[5] = 0;

	// scale Bfield (work-around solution to keep charge state fixed)
	if (currentCharge!=0.0) {
	  Bfield[0] *= userCharge/currentCharge;
	  Bfield[1] *= userCharge/currentCharge;
	  Bfield[2] *= userCharge/currentCharge;
	}
	G4cout<<std::setprecision(14);
}
